name: Build & Deploy

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev/staging/prod)'
        default: 'test'
  

jobs:
 build-and-deploy:
    runs-on: ubuntu-latest
    
    environment: test
    env:
      DOTNET_VERSION: '8.0.x'
      PROJECT_PATH: ./src/EventsManager.Application/EventsManager.Application.csproj
      TEST_PATH: ./tests/EventsManager.Application.Tests/EventsManager.Application.Tests.csproj
      APP_BASE_ARCHIVE_NAME: EventsManagerApplication

      TEMPLATE_PATH_FILE: serverless.template

    permissions:
      id-token: write
      contents: read

    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Restore Dependencies
        run: dotnet restore

      # - name: 🏗️ Build Project
      #   run: dotnet build --configuration Release --no-restore

      # - name: ✅ Run Tests
      #   run: dotnet test --configuration Release  --no-restore --verbosity minimal

      - name: 📦 Publish Project
        run: |
          dotnet publish -c Release -o ./publish
        
      - name: Set environment variables
        run: |
              DATETIME=$(date +"%Y%m%d_%H%M%S")
              ZIP_FILE_NAME="${{ env.APP_BASE_ARCHIVE_NAME }}_${DATETIME}"
              echo "Final name: $ZIP_FILE_NAME"
              echo "ZIP_FILE_NAME=${ZIP_FILE_NAME}.zip" >> $GITHUB_ENV
      
      - name: Print to ensure
        run: |
              echo "Final name: $ZIP_FILE_NAME"


      - name: Zip published output
        run: |
          cd publish
          zip -r ../$ZIP_FILE_NAME .
          cd .. 


      - name: 🛞 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
            role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_TO_ASSUME }}
            aws-region: ${{ vars.AWS_REGION }}

      - name: Upload zip to S3
        run: aws s3 cp $ZIP_FILE_NAME s3://${{ vars.S3_BUCKET }}/$ZIP_FILE_NAME
            
      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file ${{ env.TEMPLATE_PATH_FILE }} \
            --stack-name ${{ vars.STACK_NAME }} \
            --region ${{ vars.AWS_REGION }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset
            --parameter-overrides CognitoUserPoolArn=${{ secrets.COGNITO_USERPOOL_ARN }}  DeploymentS3BucketParam=${{ vars.S3_BUCKET }}  DeploymentS3KeyParam=$ZIP_FILE_NAME
       
